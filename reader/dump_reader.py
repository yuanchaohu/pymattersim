#!/usr/bin/python
# coding = utf-8
# This module is part of an analysis package


from utils.logging_utils import get_logger_handle
from reader.reader_utils import DumpFileType, Snapshots
from reader.lammps_reader_helper import read_lammps_wrapper, read_lammps_centertype_wrapper
from reader.gsd_reader_helper import read_gsd_wrapper, read_gsd_dcd_wrapper


Docstr = """
            Reading snapshots generated by LAMMPS and Hoomd-blue engines.
            By specifying the filetype argument when initializing DumpReader class, the module can read:
            1. atomistic system in LAMMPS, through calling reader.lammps_reader_helper.read_lammps_wrapper (filetype=DumpFileType.LAMMPS)
            2. molecular system in LAMMPS, through calling reader.lammps_reader_helper.read_lammps_centertype_wrapper (filetype=DumpFileType.LAMMPSCENTER)
            3. static properties in Hoomd-blue, gsd file, through calling reader.gsd_reader_helper.read_gsd_wrapper (filetype=DumpFileType.GSD)
            4. dyanmic properties in Hoomd-blue, both gsd and dcd files, through calling reader.gsd_reader_helper.read_gsd_dcd_wrapper (filetype=DumpFileType.GSD_DCD)

            --------------------Input arguments--------------------
            filename, str type, the name of dump file;
            ndim, int type, 2 or 3 for two-dimensional or three-dimensional snapshots;
            filetype, DumpFileType, defining in reader.reader_utils, default is DumpFileType.LAMMPS
            moltypes, dict type, only used for molecular system in LAMMPS, default is None. To specify, for example, \
                      if the system has 5 types of atoms in which 1-3 is one type of molecules and 4-5 is the other, and type 3 and 5 are the centers. \
                      Then moltypes should be {3:1, 5:2}. The keys ([3, 5]) of the dict (moltypes) are used to select specific atoms to present the corresponding molecules. \
                      The values ([1, 2]) is used to record  the type of molecules.

            ------------------------Usage--------------------------
            from reader.dump_reader import DumpReader
            from reader.reader_utils import DumpFileType
            reader=DumpReader(filename, ndim=3, filetype=DumpFileType.LAMMPS)
            reader.read_onefile()

            you can also directly call wrapper function, such as,
            from reader.lammps_reader_helper import read_lammps_wrapper
            snapshots = read_lammps_wrapper(filename, ndim=3)

            ------------------------Return-------------------------
            reader.snapshots: stores a list of snapshot, which consisits:
                snapshot.timestep:         simulation timestep at each snapshot
                snapshot.nparticle:        particle number from each snapshot
                snapshot.particle_type:    particle type in array in each snapshot
                snapshot.positions:        particle coordinates in array in each snapshot
                snapshot.boxlength:        box length in array in each snapshot
                snapshot.boxbounds:        box boundaries in array in each snapshot
                snapshot.realbounds:       real box bounds of a triclinic box
                snapshot.hmatrix:          h-matrix of the cells in each snapshot
            The information is stored in list whose elements are mainly numpy arraies.
            Particle-level information is sort by particle ID.

            --------------------Important Notes--------------------
            1. In LAMMPS, x, xs, and xu format coordinates are acceptable, such as with format "id type x y z". The reduced xs will be rescaled to the absolute coordinates x.
            2. Supports both orthogonal and triclinic boxes. For a triclinic box, convert the bounding box back into the trilinic box parameters:
                   xlo = xlo_bound - MIN(0.0,xy,xz,xy+xz)
                   xhi = xhi_bound - MAX(0.0,xy,xz,xy+xz)
                   ylo = ylo_bound - MIN(0.0,yz)
                   yhi = yhi_bound - MAX(0.0,yz)
                   zlo = zlo_bound
                   zhi = zhi_bound
               See 'https://docs.lammps.org/Howto_triclinic.html'
            3. For the xs and x types in orthogonal cells with periodic boundary conditions, particle coordinates are warp to the inside of the box by default, \
               which could be changed by hand when necessary. In non-periodic boundary conditions, there should be no particles at the outside of the cell.
            4. All snapshots should be in one file at this stage.
            5. To read the Hoomd-blue outputs, two new modules should be installed first: i) gsd; ii) mdtraj. These modules are available by conda. \
               Currently, the dump files from Hoomd-blue only support orthogonal box.
        """


logger = get_logger_handle(__name__)

FILE_TYPE_MAP_READER = {
    DumpFileType.LAMMPS: read_lammps_wrapper,
    DumpFileType.LAMMPSCENTER: read_lammps_centertype_wrapper,
    DumpFileType.GSD: read_gsd_wrapper,
    DumpFileType.GSD_DCD: read_gsd_dcd_wrapper,
}


class DumpReader:
    def __init__(
            self,
            filename: str,
            ndim: int,
            filetype: DumpFileType = DumpFileType.LAMMPS,
            moltypes: dict = None) -> None:

        self.filename = filename
        self.ndim = ndim
        self.filetype = filetype
        self.moltypes = moltypes
        self.snapshots: Snapshots = None

    def read_onefile(self):
        logger.info(
            f"Start Reading file {self.filename} of type {self.filetype}")

        reader_inputs = {"file_name": self.filename, "ndim": self.ndim}

        if self.filetype == DumpFileType.LAMMPSCENTER:
            reader_inputs["moltypes"] = self.moltypes

        if self.filetype == DumpFileType.GSD or DumpFileType.GSD_DCD:
            try:
                import gsd
                import mdtraj
            except ImportError:
                try:
                    import subprocess
                    import sys
                    subprocess.check_call(
                        [sys.executable, "-m", "pip", "install", "gsd"])
                    subprocess.check_call(
                        [sys.executable, "-m", "pip", "install", "mdtraj"])
                    import gsd
                    import mdtraj
                except Exception as e:
                    print(
                        f"An error occurred while installing gsd or mdtraj: {str(e)}")

        self.snapshots = FILE_TYPE_MAP_READER[self.filetype](**reader_inputs)

        logger.info(f"Completed Reading file {self.filename}")
